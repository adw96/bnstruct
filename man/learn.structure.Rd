% Generated by roxygen2 (4.0.2): do not edit by hand
\docType{methods}
\name{learn.structure}
\alias{learn.structure}
\alias{learn.structure,BN,BNDataset}
\alias{learn.structure,BN,BNDataset-method}
\title{learn the structure of a network.}
\usage{
learn.structure(bn, dataset, algo = "mmhc", scoring.func = "BDeu",
  alpha = 0.05, ess = 1, bootstrap = FALSE, layering = c(),
  max.fanin.layers = NULL, max.fanin = num.variables(dataset),
  layer.struct = NULL, cont.nodes = c(), raw.data = FALSE,
  num.boots = 100, imputation = TRUE, k.impute = 10,
  na.string.symbol = "?", seed = 0, ...)

\S4method{learn.structure}{BN,BNDataset}(bn, dataset, algo = "mmhc",
  scoring.func = "BDeu", alpha = 0.05, ess = 1, bootstrap = FALSE,
  layering = c(), max.fanin.layers = NULL,
  max.fanin = num.variables(dataset), layer.struct = NULL,
  cont.nodes = c(), raw.data = FALSE, num.boots = 100,
  imputation = TRUE, k.impute = 10, na.string.symbol = "?", seed = 0,
  ...)
}
\arguments{
\item{bn}{a \code{\link{BN}} object.}

\item{dataset}{a \code{\link{BNDataset}}.}

\item{algo}{the algorithm to use. Currently, one among \code{sm} (Silander-Myllymaki), \code{mmhc}
(Max-Min Hill Climbing, default) and \code{sem} (Structural Expectation Maximization).}

\item{scoring.func}{the scoring function to use. Currently, one among \code{BDeu}
(only for \code{algo == mmhc} or \code{sm}), \code{AIC}, \code{BIC}.}

\item{alpha}{confidence threshold (only for \code{mmhc}).}

\item{ess}{Equivalent Sample Size value.}

\item{bootstrap}{\code{TRUE} to use bootstrap samples.}

\item{layering}{vector containing the layers each node belongs to (only for \code{sm}).}

\item{max.fanin.layers}{matrix of available parents in each layer (only for \code{sm}).}

\item{max.fanin}{maximum number of parents for each node (only for \code{sm}).}

\item{layer.struct}{prior knowledge for layering structure (only for \code{mmhc}).}

\item{cont.nodes}{vector containing the index of continuous variables.}

\item{raw.data}{\code{TRUE} to learn the structure from the raw dataset. Default is to use imputed dataset
(if available, otherwise the raw dataset will be used anyway).}

\item{num.boots}{number of bootstrap samples to generate, if needed.}

\item{imputation}{\code{TRUE} if imputation is needed; if \code{bootstrap=TRUE}, imputed samples will be also used.}

\item{k.impute}{number of neighbours to be used; for discrete variables we use mode, for continuous variables the median value is instead taken.}

\item{na.string.symbol}{symbol for \code{NA} values (missing data).}

\item{seed}{random seed.}

\item{...}{potential further arguments for method.}
}
\value{
new \code{\link{BN}} object with DAG.
}
\description{
Learn the structure (the directed acyclic graph) of a \code{\link{BN}} object according to a \code{\link{BNDataset}}.
Currently, two algorithms are supported (can be specified using the \code{algo} option): \code{'sm'}, the Silander-Myllymaki exact algorithm,
and \code{'mmhc'}, the Max-Min Hill-Climbing heuristic algorithm (default).
Three scoring functions are also provided: \code{'BDeu'}, the Bayesian-Dirichlet equivalent uniform score, \code{'AIC'},
the Akaike Information criterion, and \code{'BIC'}, the Bayesian Information criterion.
}
\details{
The Silander-Myllymaki algorithm can take a very long time, and it is not feasible for networks of more than 20-30 nodes.
It is strongly recommended that valid \code{layering}, \code{max.fanin.layers} and \code{max.fanin} parameters are passed
to the method if \code{algo = 'sm'} is given as parameter to the method.
}
\examples{
\dontrun{
dataset <- BNDataset(name = "MyDataset")
dataset <- read.dataset(dataset, "file.header", "file.data")
bn <- BN()
# use MMHC
bn <- learn.structure(bn, dataset, alpha=0.05, ess=1, bootstrap=FALSE)

# now use Silander-Myllymaki
layers <- layering(bn)
mfl <- as.matrix(read.table(header=F,
text='0 1 1 1 1 0 1 1 1 1 0 0 8 7 7 0 0 0 14 6 0 0 0 0 19'))
bn <- learn.structure(bn, dataset, algo='sm', max.fanin=3, cont.nodes=c(),
                      layering=layers, max.fanin.layers=mfl, raw.data=FALSE)
}
}

